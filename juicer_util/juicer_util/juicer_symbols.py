"""
.. module:: cfe_ros2_bridge_plugin.juicer_util.juicer_symbols
   :synopsis: Class that holds an entry from the symbols table of the juicer database

.. moduleauthor:: Tod Milam

"""

import os
import yaml
from rcl_interfaces.msg import ParameterDescriptor

# Class to hold an entry in the symbols table of the database generated by juicer.
class JuicerSymbolEntry():
    """Holds the data from an entry in the symbol table of database, representing a data struct.

    Attributes
    ----------
    node : rosnode
        the ROS2 node
    my_id : str
        unique id for this symbol
    elf : int
        unused column
    name : str
        name of this symbol
    byte_size : int
        size of this data structure
    fields : list
        list of fields this structure contains
    is_command : bool
        if true then this structure represents a command object
    is_telemetry : bool
        if true then this structure represents a telemetry object
    should_output : bool
        if true then this structure should be written to a message file
    ros_name : str
        the generated ROS2 style name for this symbol
    alternative : JuicerSymbolEntry
        the symbol that should be used instead of this symbol

    Methods
    -------
    get_name():
        Return this symbols name.
    set_name(new_name):
        Set this symbols name.
    get_ros_name():
        Returns this symbols ROS2 style name.
    get_ros_name_array():
        Return this symbols ROS2 style name as an array.
    set_ros_name(name):
        Sets this symbols ROS2 style name.
    get_size():
        Return the size in bytes of this symbol.
    get_alternative():
        Returns the preferred alternative symbol to this symbol.
    set_alternative(altern):
        Sets the preferred alternative symbol to this symbol.
    get_ros_topic():
        Returns the ROS2 topic for this symbol.
    get_id():
        Returns the unique id for this symbol.
    add_field(field):
        Adds a field to this symbol.
    get_fields():
        Returns the list of fields for this symbol.
    get_is_command():
        Returns true if this symbol represents a command.
    get_is_telemetry():
        Returns true if this symbol represents a telemetry object.
    get_should_output():
        Returns true if this symbol should be written to a ROS2 message file.
    set_should_output(output):
        Sets if this symbol should be written to a ROS2 message file.
    generate_ros_name(symbol_name):
        Generate a ROS2 style name from the given name.
    handle_lower_case_name(lc_name, symbol_name):
        Helper function for generating ROS2 style name.
    field_byte_order(field):
        Helper function to sort fields by their byte offset.
    """

    map_done = False
    name_map = {}
    lower_case_map = {}

    def __init__(self, node, my_id, elf, name, byte_size):
        '''
        Initializes the symbol attributes for this object.

        Args:
            node (rosnode): The ROS2 node
            my_id (str): A unique id for this symbol
            elf (int): Unused column
            name (str): The name of this symbol
            byte_size (int): The size of this data structure
        '''
        self._node = node

        if not JuicerSymbolEntry.map_done:
            JuicerSymbolEntry.map_done = True
            self._node.declare_parameters(
              namespace="",
              parameters=[
                ('plugin_params.map_ros_name', [], ParameterDescriptor(name='plugin_params.map_ros_name',
                                                                       dynamic_typing=True))
              ]
            )
            self._map_ros_name = self._node.get_parameter('plugin_params.map_ros_name'). \
                get_parameter_value().string_array_value

            for map_file in self._map_ros_name:
                if map_file.startswith('~'):
                    map_file = os.path.expanduser(map_file)
                elif not map_file.startswith('/'):
                    # assume it is relative path
                    map_file = os.path.join(os.getcwd(), map_file)
                self._node.get_logger().debug("Parsing symbol config file " + map_file)
                # populate name_map and lower_case_map
                self.load_map_config(map_file)

        self._my_id = my_id
        self._elf = elf
        self._name = name
        self._byte_size = byte_size
        self._fields = []
        # flags indicating if this is a command or telemetry message
        self._is_command = False
        self._is_telemetry = False
        self._should_output = False
        self._ros_name = self.generate_ros_name(self._name)
        if self._ros_name == "Bool":
            # not sure why other checks don't fix this
            self._ros_name = "bool"
        self._alternative = None

    def load_map_config(self, map_file):
        with open(map_file, "r") as mapfile:
            map_config = yaml.safe_load(mapfile)
        ros_name = map_config["map_ros_name"]
        JuicerSymbolEntry.name_map = ros_name["name_to_basetypes"]
        JuicerSymbolEntry.lower_case_map = ros_name["lowercase_map"]

    def get_name(self):
        '''
        Return this symbols name.

        Returns:
            name (str): The name for this symbol
        '''
        '''
        Return this symbols name.

        Returns:
            name (str): The name for this symbol
        '''
        return self._name

    def set_name(self, new_name):
        '''
        Set this symbols name.

        Args:
            new_name (str): The new name for this symbol
        '''
        self._name = new_name

    def get_ros_name(self):
        '''
        Returns this symbols ROS2 style name.

        Returns:
            ros_name (str): The ROS2 style name for this symbol
        '''
        return self._ros_name

    def get_ros_name_array(self):
        '''
        Return this symbols ROS2 style name as an array.

        Returns:
            array_name (str): The ROS2 style name in array form
        '''
        array_name = self._ros_name + "[]"
        if self._ros_name.startswith("char"):
            array_name = "string"
        elif self._ros_name.startswith("string"):
            array_name = "string"
        return array_name

    def set_ros_name(self, name):
        '''
        Sets this symbols ROS2 style name.

        Args:
            name (str): The new ROS2 style name for this symbol
        '''
        self._ros_name = name

    def get_size(self):
        '''
        Return the size in bytes of this symbol.

        Returns:
            byte_size (int): The size of this symbol in bytes
        '''
        return self._byte_size

    def get_alternative(self):
        '''
        Returns the preferred alternative symbol to this symbol.

        Returns:
            alternative (JuicerSymbolEntry): The preferred alternative symbol
        '''
        return self._alternative

    def set_alternative(self, altern):
        '''
        Sets the preferred alternative symbol to this symbol.

        Args:
            altern (JuicerSymbolEntry): The new preferred alternative symbol
        '''
        self._alternative = altern

    def get_ros_topic(self):
        '''
        Returns the ROS2 topic for this symbol.

        Returns:
            topic (str): The generated topic name for this symbol
        '''
        n = self.get_name()
        n = n.replace("-", "_")
        n = n.replace(" ", "_")
        n = n.replace("__", "_")
        n = n.replace("*", "")
        return n.lower()

    def get_id(self):
        '''
        Returns the unique id for this symbol.

        Returns:
            my_id (str): The unique id for this symbol
        '''
        return self._my_id

    def add_field(self, field):
        '''
        Adds a field to this symbol.

        Args:
            field (JuicerFieldEntry): the field to add
        '''
        if not field.get_ros_name():
            t = str(field.get_type())
            self._node.get_logger().debug("Skipping field " + field.get_name() + ", " + t)
        else:
            self._fields.append(field)
            self._fields.sort(key=field_byte_order)
            field_type = field.get_type_name()
            if "TelemetryHeader" in field_type:
                self._is_telemetry = True
            elif "CommandHeader" in field_type:
                self._is_command = True

    def get_fields(self):
        '''
        Returns the list of fields for this symbol.

        Returns:
            fields (list): The list of fields for this symbol
        '''
        return self._fields

    def get_is_command(self):
        '''
        Returns true if this symbol represents a command.

        Returns:
            is_command (bool): If this is a command
        '''
        return self._is_command

    def get_is_telemetry(self):
        '''
        Returns true if this symbol represents a telemetry object.

        Returns:
            is_telemetry (bool): If this is a telemetry object
        '''
        return self._is_telemetry

    def get_should_output(self):
        '''
        Returns true if this symbol should be written to a ROS2 message file.

        Returns:
            should_output (bool): If this should be output to file
        '''
        return self._should_output

    def set_should_output(self, output):
        '''
        Sets if this symbol should be written to a ROS2 message file.

        Args:
            output (bool): If this should be output to file
        '''
        self._should_output = output

    def generate_ros_name(self, symbol_name):
        '''
        Generate a ROS2 style name from the given name.

        Args:
            symbol_name (str): The name used to generate the ROS2 name

        Returns:
            ros_name (str): The generated name
        '''
        n = symbol_name

        for key in JuicerSymbolEntry.name_map:
            value = JuicerSymbolEntry.name_map[key]
            if key.startswith("..."):
                newkey = key.replace("...","")
                if symbol_name.endswith(newkey):
                    n = value
                    break
            elif key.endswith("..."):
                newkey = key.replace("...","")
                if symbol_name.startswith(newkey):
                    n = value
                    break
            elif symbol_name == key:
                n = value
                break

        n = n.replace("_", "")
        n = n.replace(" ", "")
        n = n.replace("*", "")

        if n[0].islower():
            n = self.handle_lower_case_name(n)

        return n


    def handle_lower_case_name(self, lc_name):
        '''
        Helper function for generating ROS2 style name.

        Args:
            lc_name (str): The lower case name
            symbol_name (str): The symbol name

        Returns:
            name (str): The updated name
        '''
        n = None
        for key in JuicerSymbolEntry.lower_case_map:
            value = JuicerSymbolEntry.lower_case_map[key]
            if key.startswith("..."):
                newkey = key.replace("...","")
                if lc_name.endswith(newkey):
                    n = value
                    break
            elif key.endswith("..."):
                newkey = key.replace("...","")
                if lc_name.startswith(newkey):
                    n = value
                    break
            elif lc_name == key:
                n = value
                break
        if n == None:
            n = lc_name.capitalize()

        return n


def field_byte_order(field):
    '''
    Helper function to sort fields by their byte offset.

    Args:
        field (JuicerFieldEntry): The field being sorted

    Returns:
        byte_offset (int): The byte offset of the field
    '''
    return field.get_byte_offset()
